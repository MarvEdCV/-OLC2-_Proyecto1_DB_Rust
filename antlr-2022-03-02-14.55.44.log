2022-03-02 14:55:42:390 grammar LogManager.java:25 before: (PARSER_GRAMMAR GrammarSyntactic (OPTIONS (= tokenVocab GrammarLexer)) (@ header {
    import "OLC2/interfaces"
    import "OLC2/expresion"
    import "OLC2/instruction"
    import arrayList "github.com/colegno/arraylist"
}) (RULES (RULE start (returns *arrayList.List lista) (BLOCK (ALT instrucciones {$lista = $instrucciones.l}))) (RULE instrucciones (returns *arrayList.List l) (@ init {
    $l =  arrayList.New()
  }) (BLOCK (ALT (* (BLOCK (ALT (+= e instruccion)))) {
      listInt := localctx.(*InstruccionesContext).GetE()
      		for _, e := range listInt {
            $l.Add(e.GetInstr())
          }
    }))) (RULE instruccion (returns interfaces.Instruction instr) (BLOCK (ALT CONSOLE '.' LOG PARIZQ expression PARDER ';' {$instr = instruction.NewImprimir($expression.p)}) (ALT P_NUMBER (= isArray array_st) (= id ID) '=' expression ';' {$instr = instruction.NewDeclaration($id.text,interfaces.INTEGER,$expression.p, $isArray.arr)}) (ALT (= id ID) '=' expression ';' {$instr = instruction.NewAssignment($id.text,$expression.p)}) (ALT P_IF PARIZQ expression PARDER LLAVEIZQ instrucciones LLAVEDER {$instr = instruction.NewIf($expression.p, $instrucciones.l)}) (ALT P_WHILE PARIZQ expression PARDER LLAVEIZQ instrucciones LLAVEDER {$instr = instruction.NewWhile($expression.p, $instrucciones.l)}))) (RULE array_st (returns bool arr) (BLOCK (ALT CORIZQ CORDER { $arr = true }) (ALT EPSILON))) (RULE expression (returns interfaces.Expresion p) (BLOCK (ALT expr_arit {$p = $expr_arit.p}))) (RULE expr_arit (returns interfaces.Expresion p) (BLOCK (ALT (= opIz expr_arit) (= op (BLOCK (ALT '*') (ALT '/'))) (= opDe expr_arit) {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false)}) (ALT (= opIz expr_arit) (= op (BLOCK (ALT '+') (ALT '-'))) (= opDe expr_arit) {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false)}) (ALT (= opIz expr_arit) (= op (BLOCK (ALT '<') (ALT '<=') (ALT '>=') (ALT '>'))) (= opDe expr_arit) {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false)}) (ALT CORIZQ listValues CORDER { $p = expresion.NewArray($listValues.l) }) (ALT primitivo {$p = $primitivo.p}) (ALT PARIZQ expression PARDER {$p = $expression.p}))) (RULE listValues (returns *arrayList.List l) (BLOCK (ALT (= list listValues) ',' expression { 
                                        $list.l.Add($expression.p)
                                        $l = $list.l
                                    }) (ALT expression { 
                    $l = arrayList.New()
                    $l.Add($expression.p)
                }))) (RULE primitivo (returns interfaces.Expresion p) (BLOCK (ALT NUMBER {
            	num,err := strconv.Atoi($NUMBER.text)
                if err!= nil{
                    fmt.Println(err)
                }
            $p = expresion.NewPrimitivo (num,interfaces.INTEGER)
       }) (ALT STRING { 
      str:= $STRING.text[1:len($STRING.text)-1]
      $p = expresion.NewPrimitivo(str,interfaces.STRING)}) (ALT (= list listArray) { $p = $list.p}))) (RULE listArray (returns interfaces.Expresion p) (BLOCK (ALT (= list listArray) CORIZQ expression CORDER { $p = expresion.NewArrayAccess($list.p, $expression.p) }) (ALT ID { $p = expresion.NewCallVariable($ID.text)})))))
2022-03-02 14:55:42:414 grammar LogManager.java:25 after: (PARSER_GRAMMAR GrammarSyntactic (OPTIONS (= tokenVocab GrammarLexer)) (@ header {
    import "OLC2/interfaces"
    import "OLC2/expresion"
    import "OLC2/instruction"
    import arrayList "github.com/colegno/arraylist"
}) (RULES (RULE start (returns *arrayList.List lista) (BLOCK (ALT instrucciones {$lista = $instrucciones.l}))) (RULE instrucciones (returns *arrayList.List l) (@ init {
    $l =  arrayList.New()
  }) (BLOCK (ALT (* (BLOCK (ALT (+= e instruccion)))) {
      listInt := localctx.(*InstruccionesContext).GetE()
      		for _, e := range listInt {
            $l.Add(e.GetInstr())
          }
    }))) (RULE instruccion (returns interfaces.Instruction instr) (BLOCK (ALT CONSOLE '.' LOG PARIZQ expression PARDER ';' {$instr = instruction.NewImprimir($expression.p)}) (ALT P_NUMBER (= isArray array_st) (= id ID) '=' expression ';' {$instr = instruction.NewDeclaration($id.text,interfaces.INTEGER,$expression.p, $isArray.arr)}) (ALT (= id ID) '=' expression ';' {$instr = instruction.NewAssignment($id.text,$expression.p)}) (ALT P_IF PARIZQ expression PARDER LLAVEIZQ instrucciones LLAVEDER {$instr = instruction.NewIf($expression.p, $instrucciones.l)}) (ALT P_WHILE PARIZQ expression PARDER LLAVEIZQ instrucciones LLAVEDER {$instr = instruction.NewWhile($expression.p, $instrucciones.l)}))) (RULE array_st (returns bool arr) (BLOCK (ALT CORIZQ CORDER { $arr = true }) (ALT EPSILON))) (RULE expression (returns interfaces.Expresion p) (BLOCK (ALT expr_arit {$p = $expr_arit.p}))) (RULE expr_arit (returns interfaces.Expresion p) (BLOCK (ALT (= opIz expr_arit) (= op (SET '*' '/')) (= opDe expr_arit) {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false)}) (ALT (= opIz expr_arit) (= op (SET '+' '-')) (= opDe expr_arit) {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false)}) (ALT (= opIz expr_arit) (= op (SET '<' '<=' '>=' '>')) (= opDe expr_arit) {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false)}) (ALT CORIZQ listValues CORDER { $p = expresion.NewArray($listValues.l) }) (ALT primitivo {$p = $primitivo.p}) (ALT PARIZQ expression PARDER {$p = $expression.p}))) (RULE listValues (returns *arrayList.List l) (BLOCK (ALT (= list listValues) ',' expression { 
                                        $list.l.Add($expression.p)
                                        $l = $list.l
                                    }) (ALT expression { 
                    $l = arrayList.New()
                    $l.Add($expression.p)
                }))) (RULE primitivo (returns interfaces.Expresion p) (BLOCK (ALT NUMBER {
            	num,err := strconv.Atoi($NUMBER.text)
                if err!= nil{
                    fmt.Println(err)
                }
            $p = expresion.NewPrimitivo (num,interfaces.INTEGER)
       }) (ALT STRING { 
      str:= $STRING.text[1:len($STRING.text)-1]
      $p = expresion.NewPrimitivo(str,interfaces.STRING)}) (ALT (= list listArray) { $p = $list.p}))) (RULE listArray (returns interfaces.Expresion p) (BLOCK (ALT (= list listArray) CORIZQ expression CORDER { $p = expresion.NewArrayAccess($list.p, $expression.p) }) (ALT ID { $p = expresion.NewCallVariable($ID.text)})))))
2022-03-02 14:55:42:897 left-recursion LogManager.java:25 expr_arit returns [interfaces.Expresion p]
    :   ( {} CORIZQ<tokenIndex=267> listValues<tokenIndex=269> CORDER<tokenIndex=271> { $p = expresion.NewArray($listValues.l) } 
        | primitivo<tokenIndex=277> {$p = $primitivo.p} 
        | PARIZQ<tokenIndex=283> expression<tokenIndex=285> PARDER<tokenIndex=287> {$p = $expression.p} 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 6)}?<p=6> op=('*'<tokenIndex=200>|'/'<tokenIndex=202>) opDe = expr_arit<tokenIndex=209,p=7> {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false)}
                  | {p.Precpred(p.GetParserRuleContext(), 5)}?<p=5> op=('+'<tokenIndex=224>|'-'<tokenIndex=226>) opDe = expr_arit<tokenIndex=233,p=6> {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false)}
                  | {p.Precpred(p.GetParserRuleContext(), 4)}?<p=4> op=('<'<tokenIndex=248>|'<='<tokenIndex=250>|'>='<tokenIndex=252>|'>'<tokenIndex=254>) opDe = expr_arit<tokenIndex=261,p=5> {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false)}
        )*
    ;
2022-03-02 14:55:42:915 grammar LogManager.java:25 added: (RULE expr_arit (returns interfaces.Expresion p) (BLOCK (ALT (BLOCK (ALT {} (CORIZQ (ELEMENT_OPTIONS (= tokenIndex 267))) (listValues (ELEMENT_OPTIONS (= tokenIndex 269))) (CORDER (ELEMENT_OPTIONS (= tokenIndex 271))) { $p = expresion.NewArray($listValues.l) }) (ALT (primitivo (ELEMENT_OPTIONS (= tokenIndex 277))) {$p = $primitivo.p}) (ALT (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 283))) (expression (ELEMENT_OPTIONS (= tokenIndex 285))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 287))) {$p = $expression.p})) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 6)}? (ELEMENT_OPTIONS (= p 6))) (= op (SET ('*' (ELEMENT_OPTIONS (= tokenIndex 200))) ('/' (ELEMENT_OPTIONS (= tokenIndex 202))))) (= opDe (expr_arit (ELEMENT_OPTIONS (= tokenIndex 209) (= p 7)))) {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false)}) (ALT ({p.Precpred(p.GetParserRuleContext(), 5)}? (ELEMENT_OPTIONS (= p 5))) (= op (SET ('+' (ELEMENT_OPTIONS (= tokenIndex 224))) ('-' (ELEMENT_OPTIONS (= tokenIndex 226))))) (= opDe (expr_arit (ELEMENT_OPTIONS (= tokenIndex 233) (= p 6)))) {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false)}) (ALT ({p.Precpred(p.GetParserRuleContext(), 4)}? (ELEMENT_OPTIONS (= p 4))) (= op (SET ('<' (ELEMENT_OPTIONS (= tokenIndex 248))) ('<=' (ELEMENT_OPTIONS (= tokenIndex 250))) ('>=' (ELEMENT_OPTIONS (= tokenIndex 252))) ('>' (ELEMENT_OPTIONS (= tokenIndex 254))))) (= opDe (expr_arit (ELEMENT_OPTIONS (= tokenIndex 261) (= p 5)))) {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false)}))))))
2022-03-02 14:55:43:214 left-recursion LogManager.java:25 listValues returns [*arrayList.List l]
    :   ( {} expression<tokenIndex=312> { 
                    $l = arrayList.New()
                    $l.Add($expression.p)
                } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> ','<tokenIndex=304> expression<tokenIndex=306> { 
                                                  $list.l.Add($expression.p)
                                                  $l = $list.l
                                              }
        )*
    ;
2022-03-02 14:55:43:226 grammar LogManager.java:25 added: (RULE listValues (returns *arrayList.List l) (BLOCK (ALT (BLOCK (ALT {} (expression (ELEMENT_OPTIONS (= tokenIndex 312))) { 
                    $l = arrayList.New()
                    $l.Add($expression.p)
                })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (',' (ELEMENT_OPTIONS (= tokenIndex 304))) (expression (ELEMENT_OPTIONS (= tokenIndex 306))) { 
                                                  $list.l.Add($expression.p)
                                                  $l = $list.l
                                              }))))))
2022-03-02 14:55:43:397 left-recursion LogManager.java:25 listArray returns [interfaces.Expresion p]
    :   ( {} ID<tokenIndex=367> { $p = expresion.NewCallVariable($ID.text)} 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> CORIZQ<tokenIndex=357> expression<tokenIndex=359> CORDER<tokenIndex=361> { $p = expresion.NewArrayAccess($list.p, $expression.p) }
        )*
    ;
2022-03-02 14:55:43:399 grammar LogManager.java:25 added: (RULE listArray (returns interfaces.Expresion p) (BLOCK (ALT (BLOCK (ALT {} (ID (ELEMENT_OPTIONS (= tokenIndex 367))) { $p = expresion.NewCallVariable($ID.text)})) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (CORIZQ (ELEMENT_OPTIONS (= tokenIndex 357))) (expression (ELEMENT_OPTIONS (= tokenIndex 359))) (CORDER (ELEMENT_OPTIONS (= tokenIndex 361))) { $p = expresion.NewArrayAccess($list.p, $expression.p) }))))))
2022-03-02 14:55:43:440 grammar LogManager.java:25 import CONSOLE=1
2022-03-02 14:55:43:440 grammar LogManager.java:25 import LOG=2
2022-03-02 14:55:43:441 grammar LogManager.java:25 import P_NUMBER=3
2022-03-02 14:55:43:441 grammar LogManager.java:25 import P_STRING=4
2022-03-02 14:55:43:441 grammar LogManager.java:25 import P_IF=5
2022-03-02 14:55:43:441 grammar LogManager.java:25 import P_WHILE=6
2022-03-02 14:55:43:441 grammar LogManager.java:25 import NUMBER=7
2022-03-02 14:55:43:441 grammar LogManager.java:25 import STRING=8
2022-03-02 14:55:43:441 grammar LogManager.java:25 import ID=9
2022-03-02 14:55:43:441 grammar LogManager.java:25 import PUNTO=10
2022-03-02 14:55:43:441 grammar LogManager.java:25 import PTCOMA=11
2022-03-02 14:55:43:441 grammar LogManager.java:25 import COMA=12
2022-03-02 14:55:43:441 grammar LogManager.java:25 import DIFERENTE=13
2022-03-02 14:55:43:441 grammar LogManager.java:25 import IGUAL=14
2022-03-02 14:55:43:441 grammar LogManager.java:25 import MAYORIGUAL=15
2022-03-02 14:55:43:442 grammar LogManager.java:25 import MENORIGUAL=16
2022-03-02 14:55:43:442 grammar LogManager.java:25 import MAYOR=17
2022-03-02 14:55:43:442 grammar LogManager.java:25 import MENOR=18
2022-03-02 14:55:43:443 grammar LogManager.java:25 import MUL=19
2022-03-02 14:55:43:443 grammar LogManager.java:25 import DIV=20
2022-03-02 14:55:43:443 grammar LogManager.java:25 import ADD=21
2022-03-02 14:55:43:443 grammar LogManager.java:25 import SUB=22
2022-03-02 14:55:43:443 grammar LogManager.java:25 import PARIZQ=23
2022-03-02 14:55:43:443 grammar LogManager.java:25 import PARDER=24
2022-03-02 14:55:43:443 grammar LogManager.java:25 import LLAVEIZQ=25
2022-03-02 14:55:43:443 grammar LogManager.java:25 import LLAVEDER=26
2022-03-02 14:55:43:444 grammar LogManager.java:25 import CORIZQ=27
2022-03-02 14:55:43:444 grammar LogManager.java:25 import CORDER=28
2022-03-02 14:55:43:444 grammar LogManager.java:25 import WHITESPACE=29
2022-03-02 14:55:43:444 grammar LogManager.java:25 import 'console'=1
2022-03-02 14:55:43:444 grammar LogManager.java:25 import 'log'=2
2022-03-02 14:55:43:444 grammar LogManager.java:25 import 'number'=3
2022-03-02 14:55:43:444 grammar LogManager.java:25 import 'string'=4
2022-03-02 14:55:43:445 grammar LogManager.java:25 import 'if'=5
2022-03-02 14:55:43:445 grammar LogManager.java:25 import 'while'=6
2022-03-02 14:55:43:446 grammar LogManager.java:25 import '.'=10
2022-03-02 14:55:43:446 grammar LogManager.java:25 import ';'=11
2022-03-02 14:55:43:446 grammar LogManager.java:25 import ','=12
2022-03-02 14:55:43:446 grammar LogManager.java:25 import '!'=13
2022-03-02 14:55:43:446 grammar LogManager.java:25 import '='=14
2022-03-02 14:55:43:446 grammar LogManager.java:25 import '>='=15
2022-03-02 14:55:43:446 grammar LogManager.java:25 import '<='=16
2022-03-02 14:55:43:446 grammar LogManager.java:25 import '>'=17
2022-03-02 14:55:43:446 grammar LogManager.java:25 import '<'=18
2022-03-02 14:55:43:446 grammar LogManager.java:25 import '*'=19
2022-03-02 14:55:43:446 grammar LogManager.java:25 import '/'=20
2022-03-02 14:55:43:446 grammar LogManager.java:25 import '+'=21
2022-03-02 14:55:43:446 grammar LogManager.java:25 import '-'=22
2022-03-02 14:55:43:446 grammar LogManager.java:25 import '('=23
2022-03-02 14:55:43:446 grammar LogManager.java:25 import ')'=24
2022-03-02 14:55:43:446 grammar LogManager.java:25 import '{'=25
2022-03-02 14:55:43:446 grammar LogManager.java:25 import '}'=26
2022-03-02 14:55:43:447 grammar LogManager.java:25 import '['=27
2022-03-02 14:55:43:447 grammar LogManager.java:25 import ']'=28
2022-03-02 14:55:43:447 grammar LogManager.java:25 tokens={CONSOLE=1, LOG=2, P_NUMBER=3, P_STRING=4, P_IF=5, P_WHILE=6, NUMBER=7, STRING=8, ID=9, PUNTO=10, PTCOMA=11, COMA=12, DIFERENTE=13, IGUAL=14, MAYORIGUAL=15, MENORIGUAL=16, MAYOR=17, MENOR=18, MUL=19, DIV=20, ADD=21, SUB=22, PARIZQ=23, PARDER=24, LLAVEIZQ=25, LLAVEDER=26, CORIZQ=27, CORDER=28, WHITESPACE=29, 'console'=1, 'log'=2, 'number'=3, 'string'=4, 'if'=5, 'while'=6, '.'=10, ';'=11, ','=12, '!'=13, '='=14, '>='=15, '<='=16, '>'=17, '<'=18, '*'=19, '/'=20, '+'=21, '-'=22, '('=23, ')'=24, '{'=25, '}'=26, '['=27, ']'=28}
2022-03-02 14:55:43:447 semantics LogManager.java:25 tokens={EOF=-1, CONSOLE=1, LOG=2, P_NUMBER=3, P_STRING=4, P_IF=5, P_WHILE=6, NUMBER=7, STRING=8, ID=9, PUNTO=10, PTCOMA=11, COMA=12, DIFERENTE=13, IGUAL=14, MAYORIGUAL=15, MENORIGUAL=16, MAYOR=17, MENOR=18, MUL=19, DIV=20, ADD=21, SUB=22, PARIZQ=23, PARDER=24, LLAVEIZQ=25, LLAVEDER=26, CORIZQ=27, CORDER=28, WHITESPACE=29}
2022-03-02 14:55:43:447 semantics LogManager.java:25 strings={'console'=1, 'log'=2, 'number'=3, 'string'=4, 'if'=5, 'while'=6, '.'=10, ';'=11, ','=12, '!'=13, '='=14, '>='=15, '<='=16, '>'=17, '<'=18, '*'=19, '/'=20, '+'=21, '-'=22, '('=23, ')'=24, '{'=25, '}'=26, '['=27, ']'=28}
2022-03-02 14:55:43:514 LL1 LogManager.java:25 
DECISION 0 in rule instrucciones
2022-03-02 14:55:43:514 LL1 LogManager.java:25 look=[{1, 3, 5..6, 9}, {<EOF>, 26}]
2022-03-02 14:55:43:514 LL1 LogManager.java:25 LL(1)? true
2022-03-02 14:55:43:514 LL1 LogManager.java:25 
DECISION 1 in rule instruccion
2022-03-02 14:55:43:514 LL1 LogManager.java:25 look=[1, 3, 9, 5, 6]
2022-03-02 14:55:43:514 LL1 LogManager.java:25 LL(1)? true
2022-03-02 14:55:43:514 LL1 LogManager.java:25 
DECISION 2 in rule array_st
2022-03-02 14:55:43:514 LL1 LogManager.java:25 look=[27, 9]
2022-03-02 14:55:43:515 LL1 LogManager.java:25 LL(1)? true
2022-03-02 14:55:43:515 LL1 LogManager.java:25 
DECISION 3 in rule expr_arit
2022-03-02 14:55:43:515 LL1 LogManager.java:25 look=[27, {7..9}, 23]
2022-03-02 14:55:43:515 LL1 LogManager.java:25 LL(1)? true
2022-03-02 14:55:43:515 LL1 LogManager.java:25 
DECISION 4 in rule expr_arit
2022-03-02 14:55:43:515 LL1 LogManager.java:25 look=[null, null, null]
2022-03-02 14:55:43:515 LL1 LogManager.java:25 LL(1)? false
2022-03-02 14:55:43:515 LL1 LogManager.java:25 
DECISION 5 in rule expr_arit
2022-03-02 14:55:43:515 LL1 LogManager.java:25 look=[null, null]
2022-03-02 14:55:43:515 LL1 LogManager.java:25 LL(1)? false
2022-03-02 14:55:43:515 LL1 LogManager.java:25 
DECISION 6 in rule listValues
2022-03-02 14:55:43:515 LL1 LogManager.java:25 look=[null, 28]
2022-03-02 14:55:43:515 LL1 LogManager.java:25 LL(1)? false
2022-03-02 14:55:43:515 LL1 LogManager.java:25 
DECISION 7 in rule primitivo
2022-03-02 14:55:43:515 LL1 LogManager.java:25 look=[7, 8, 9]
2022-03-02 14:55:43:515 LL1 LogManager.java:25 LL(1)? true
2022-03-02 14:55:43:515 LL1 LogManager.java:25 
DECISION 8 in rule listArray
2022-03-02 14:55:43:516 LL1 LogManager.java:25 look=[null, null]
2022-03-02 14:55:43:516 LL1 LogManager.java:25 LL(1)? false
2022-03-02 14:55:43:567 action-translator LogManager.java:25 translate 
    import "OLC2/interfaces"
    import "OLC2/expresion"
    import "OLC2/instruction"
    import arrayList "github.com/colegno/arraylist"

2022-03-02 14:55:43:716 action-translator LogManager.java:25 translate $lista = $instrucciones.l
2022-03-02 14:55:43:716 action-translator LogManager.java:25 attr [@-1,1:5='lista',<0>,15:19]
2022-03-02 14:55:43:717 action-translator LogManager.java:25 qattr [@-1,10:22='instrucciones',<0>,15:28].[@-1,24:24='l',<0>,15:42]
2022-03-02 14:55:43:719 action-translator LogManager.java:25 translate 
    $l =  arrayList.New()
  
2022-03-02 14:55:43:719 action-translator LogManager.java:25 attr [@-1,7:7='l',<0>,20:5]
2022-03-02 14:55:43:721 action-translator LogManager.java:25 translate 
      listInt := localctx.(*InstruccionesContext).GetE()
      		for _, e := range listInt {
            $l.Add(e.GetInstr())
          }
    
2022-03-02 14:55:43:721 action-translator LogManager.java:25 attr [@-1,110:110='l',<0>,25:13]
2022-03-02 14:55:43:730 action-translator LogManager.java:25 translate $instr = instruction.NewImprimir($expression.p)
2022-03-02 14:55:43:731 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,32:50]
2022-03-02 14:55:43:731 action-translator LogManager.java:25 qattr [@-1,34:43='expression',<0>,32:83].[@-1,45:45='p',<0>,32:94]
2022-03-02 14:55:43:731 action-translator LogManager.java:25 translate $instr = instruction.NewDeclaration($id.text,interfaces.INTEGER,$expression.p, $isArray.arr)
2022-03-02 14:55:43:732 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,33:55]
2022-03-02 14:55:43:733 action-translator LogManager.java:25 qattr [@-1,37:38='id',<0>,33:91].[@-1,40:43='text',<0>,33:94]
2022-03-02 14:55:43:734 action-translator LogManager.java:25 qattr [@-1,65:74='expression',<0>,33:119].[@-1,76:76='p',<0>,33:130]
2022-03-02 14:55:43:734 action-translator LogManager.java:25 qattr [@-1,80:86='isArray',<0>,33:134].[@-1,88:90='arr',<0>,33:142]
2022-03-02 14:55:43:735 action-translator LogManager.java:25 translate $instr = instruction.NewAssignment($id.text,$expression.p)
2022-03-02 14:55:43:735 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,34:29]
2022-03-02 14:55:43:735 action-translator LogManager.java:25 qattr [@-1,36:37='id',<0>,34:64].[@-1,39:42='text',<0>,34:67]
2022-03-02 14:55:43:735 action-translator LogManager.java:25 qattr [@-1,45:54='expression',<0>,34:73].[@-1,56:56='p',<0>,34:84]
2022-03-02 14:55:43:736 action-translator LogManager.java:25 translate $instr = instruction.NewIf($expression.p, $instrucciones.l)
2022-03-02 14:55:43:736 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,35:68]
2022-03-02 14:55:43:736 action-translator LogManager.java:25 qattr [@-1,28:37='expression',<0>,35:95].[@-1,39:39='p',<0>,35:106]
2022-03-02 14:55:43:737 action-translator LogManager.java:25 qattr [@-1,43:55='instrucciones',<0>,35:110].[@-1,57:57='l',<0>,35:124]
2022-03-02 14:55:43:737 action-translator LogManager.java:25 translate $instr = instruction.NewWhile($expression.p, $instrucciones.l)
2022-03-02 14:55:43:737 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,36:71]
2022-03-02 14:55:43:737 action-translator LogManager.java:25 qattr [@-1,31:40='expression',<0>,36:101].[@-1,42:42='p',<0>,36:112]
2022-03-02 14:55:43:737 action-translator LogManager.java:25 qattr [@-1,46:58='instrucciones',<0>,36:116].[@-1,60:60='l',<0>,36:130]
2022-03-02 14:55:43:740 action-translator LogManager.java:25 translate  $arr = true 
2022-03-02 14:55:43:741 action-translator LogManager.java:25 attr [@-1,2:4='arr',<0>,40:21]
2022-03-02 14:55:43:741 action-translator LogManager.java:25 translate $p = $expr_arit.p
2022-03-02 14:55:43:741 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,45:20]
2022-03-02 14:55:43:743 action-translator LogManager.java:25 qattr [@-1,6:14='expr_arit',<0>,45:25].[@-1,16:16='p',<0>,45:35]
2022-03-02 14:55:43:746 action-translator LogManager.java:25 translate 
2022-03-02 14:55:43:746 action-translator LogManager.java:25 translate  $p = expresion.NewArray($listValues.l) 
2022-03-02 14:55:43:746 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,2:88]
2022-03-02 14:55:43:747 action-translator LogManager.java:25 qattr [@-1,26:35='listValues',<0>,2:112].[@-1,37:37='l',<0>,2:123]
2022-03-02 14:55:43:747 action-translator LogManager.java:25 translate $p = $primitivo.p
2022-03-02 14:55:43:747 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,3:37]
2022-03-02 14:55:43:747 action-translator LogManager.java:25 qattr [@-1,6:14='primitivo',<0>,3:42].[@-1,16:16='p',<0>,3:52]
2022-03-02 14:55:43:748 action-translator LogManager.java:25 translate $p = $expression.p
2022-03-02 14:55:43:748 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,4:84]
2022-03-02 14:55:43:748 action-translator LogManager.java:25 qattr [@-1,6:15='expression',<0>,4:89].[@-1,17:17='p',<0>,4:100]
2022-03-02 14:55:43:749 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 6)
2022-03-02 14:55:43:750 action-translator LogManager.java:25 translate $p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false)
2022-03-02 14:55:43:750 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,7:141]
2022-03-02 14:55:43:750 action-translator LogManager.java:25 qattr [@-1,29:32='opIz',<0>,7:169].[@-1,34:34='p',<0>,7:174]
2022-03-02 14:55:43:750 action-translator LogManager.java:25 qattr [@-1,37:38='op',<0>,7:177].[@-1,40:43='text',<0>,7:180]
2022-03-02 14:55:43:750 action-translator LogManager.java:25 qattr [@-1,46:49='opDe',<0>,7:186].[@-1,51:51='p',<0>,7:191]
2022-03-02 14:55:43:750 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 5)
2022-03-02 14:55:43:751 action-translator LogManager.java:25 translate $p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false)
2022-03-02 14:55:43:751 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,8:151]
2022-03-02 14:55:43:751 action-translator LogManager.java:25 qattr [@-1,29:32='opIz',<0>,8:179].[@-1,34:34='p',<0>,8:184]
2022-03-02 14:55:43:751 action-translator LogManager.java:25 qattr [@-1,37:38='op',<0>,8:187].[@-1,40:43='text',<0>,8:190]
2022-03-02 14:55:43:751 action-translator LogManager.java:25 qattr [@-1,46:49='opDe',<0>,8:196].[@-1,51:51='p',<0>,8:201]
2022-03-02 14:55:43:752 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 4)
2022-03-02 14:55:43:753 action-translator LogManager.java:25 translate $p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false)
2022-03-02 14:55:43:753 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,9:193]
2022-03-02 14:55:43:754 action-translator LogManager.java:25 qattr [@-1,29:32='opIz',<0>,9:221].[@-1,34:34='p',<0>,9:226]
2022-03-02 14:55:43:754 action-translator LogManager.java:25 qattr [@-1,37:38='op',<0>,9:229].[@-1,40:43='text',<0>,9:232]
2022-03-02 14:55:43:754 action-translator LogManager.java:25 qattr [@-1,46:49='opDe',<0>,9:238].[@-1,51:51='p',<0>,9:243]
2022-03-02 14:55:43:755 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 6)
2022-03-02 14:55:43:756 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 5)
2022-03-02 14:55:43:756 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 4)
2022-03-02 14:55:43:756 action-translator LogManager.java:25 translate 
2022-03-02 14:55:43:757 action-translator LogManager.java:25 translate  
                    $l = arrayList.New()
                    $l.Add($expression.p)
                
2022-03-02 14:55:43:757 action-translator LogManager.java:25 attr [@-1,24:24='l',<0>,3:21]
2022-03-02 14:55:43:757 action-translator LogManager.java:25 attr [@-1,66:66='l',<0>,4:21]
2022-03-02 14:55:43:757 action-translator LogManager.java:25 qattr [@-1,73:82='expression',<0>,4:28].[@-1,84:84='p',<0>,4:39]
2022-03-02 14:55:43:757 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-03-02 14:55:43:758 action-translator LogManager.java:25 translate  
                                                  $list.l.Add($expression.p)
                                                  $l = $list.l
                                              
2022-03-02 14:55:43:758 action-translator LogManager.java:25 qattr [@-1,54:57='list',<0>,9:51].[@-1,59:59='l',<0>,9:56]
2022-03-02 14:55:43:759 action-translator LogManager.java:25 qattr [@-1,66:75='expression',<0>,9:63].[@-1,77:77='p',<0>,9:74]
2022-03-02 14:55:43:759 action-translator LogManager.java:25 attr [@-1,132:132='l',<0>,10:51]
2022-03-02 14:55:43:760 action-translator LogManager.java:25 qattr [@-1,137:140='list',<0>,10:56].[@-1,142:142='l',<0>,10:61]
2022-03-02 14:55:43:760 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-03-02 14:55:43:761 action-translator LogManager.java:25 translate 
            	num,err := strconv.Atoi($NUMBER.text)
                if err!= nil{
                    fmt.Println(err)
                }
            $p = expresion.NewPrimitivo (num,interfaces.INTEGER)
       
2022-03-02 14:55:43:761 action-translator LogManager.java:25 qattr [@-1,40:45='NUMBER',<0>,70:38].[@-1,47:50='text',<0>,70:45]
2022-03-02 14:55:43:761 action-translator LogManager.java:25 attr [@-1,155:155='p',<0>,74:13]
2022-03-02 14:55:43:764 action-translator LogManager.java:25 translate  
      str:= $STRING.text[1:len($STRING.text)-1]
      $p = expresion.NewPrimitivo(str,interfaces.STRING)
2022-03-02 14:55:43:764 action-translator LogManager.java:25 qattr [@-1,16:21='STRING',<0>,77:13].[@-1,23:26='text',<0>,77:20]
2022-03-02 14:55:43:767 action-translator LogManager.java:25 qattr [@-1,35:40='STRING',<0>,77:32].[@-1,42:45='text',<0>,77:39]
2022-03-02 14:55:43:767 action-translator LogManager.java:25 attr [@-1,59:59='p',<0>,78:7]
2022-03-02 14:55:43:767 action-translator LogManager.java:25 translate  $p = $list.p
2022-03-02 14:55:43:767 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,79:23]
2022-03-02 14:55:43:767 action-translator LogManager.java:25 qattr [@-1,7:10='list',<0>,79:28].[@-1,12:12='p',<0>,79:33]
2022-03-02 14:55:43:768 action-translator LogManager.java:25 translate 
2022-03-02 14:55:43:774 action-translator LogManager.java:25 translate  $p = expresion.NewCallVariable($ID.text)
2022-03-02 14:55:43:775 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,2:34]
2022-03-02 14:55:43:775 action-translator LogManager.java:25 qattr [@-1,33:34='ID',<0>,2:65].[@-1,36:39='text',<0>,2:68]
2022-03-02 14:55:43:775 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-03-02 14:55:43:776 action-translator LogManager.java:25 translate  $p = expresion.NewArrayAccess($list.p, $expression.p) 
2022-03-02 14:55:43:776 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,5:133]
2022-03-02 14:55:43:776 action-translator LogManager.java:25 qattr [@-1,32:35='list',<0>,5:163].[@-1,37:37='p',<0>,5:168]
2022-03-02 14:55:43:777 action-translator LogManager.java:25 qattr [@-1,41:50='expression',<0>,5:172].[@-1,52:52='p',<0>,5:183]
2022-03-02 14:55:43:777 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-03-02 14:55:44:292 action-translator LogManager.java:25 translate 
    import "OLC2/interfaces"
    import "OLC2/expresion"
    import "OLC2/instruction"
    import arrayList "github.com/colegno/arraylist"

2022-03-02 14:55:44:292 action-translator LogManager.java:25 translate 
    import "OLC2/interfaces"
    import "OLC2/expresion"
    import "OLC2/instruction"
    import arrayList "github.com/colegno/arraylist"

2022-03-02 14:55:44:465 action-translator LogManager.java:25 translate 
    import "OLC2/interfaces"
    import "OLC2/expresion"
    import "OLC2/instruction"
    import arrayList "github.com/colegno/arraylist"

2022-03-02 14:55:44:465 action-translator LogManager.java:25 translate 
    import "OLC2/interfaces"
    import "OLC2/expresion"
    import "OLC2/instruction"
    import arrayList "github.com/colegno/arraylist"

